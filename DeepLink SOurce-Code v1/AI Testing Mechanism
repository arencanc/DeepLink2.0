#include <cassandra.h>
#include <iostream>

int main() {
    // Connect to the Cassandra cluster
    CassCluster* cluster = cass_cluster_new();
    cass_cluster_set_contact_points(cluster, "localhost");
    CassSession* session = cass_session_new();
    CassFuture* connect_future = cass_session_connect(session, cluster);
    cass_future_wait(connect_future);
    CassError error = cass_future_error_code(connect_future);
    if (error != CASS_OK) {
        std::cerr << "Error connecting to Cassandra cluster: " << cass_error_desc(error) << std::endl;
        return 1;
    }
    cass_future_free(connect_future);

    // Create the keyspace and table for storing transactions
    std::string create_keyspace_query = "CREATE KEYSPACE IF NOT EXISTS transactions WITH REPLICATION = {'class': 'SimpleStrategy', 'replication_factor': 1}";
    CassStatement* create_keyspace_statement = cass_statement_new(create_keyspace_query.c_str(), 0);
    CassFuture* create_keyspace_future = cass_session_execute(session, create_keyspace_statement);
    cass_future_wait(create_keyspace_future);
    error = cass_future_error_code(create_keyspace_future);
    if (error != CASS_OK) {
        std::cerr << "Error creating keyspace: " << cass_error_desc(error) << std::endl;
        return 1;
    }
    cass_future_free(create_keyspace_future);
    cass_statement_free(create_keyspace_statement);
    std::string create_table_query = "CREATE TABLE IF NOT EXISTS transactions.transactions (id int PRIMARY KEY, sender varchar, receiver varchar, amount float)";
   
    CassStatement* create_table_statement = cass_statement_new(create_table_query.c_str(), 0);
    CassFuture* create_table_future = cass_session_execute(session, create_table_statement);
    cass_future_wait(create_table_future);
    error = cass_future_error_code(create_table_future);
    if (error != CASS_OK) {
        std::cerr << "Error creating table: " << cass_error_desc(error) << std::endl;
        return 1;
    }
    cass_future_free(create_table_future);
    cass_statement_free(create_table_statement);

    // Insert some transactions into the table
    for (int i = 0; i < 10; i++) {
        std::string insert_query = "INSERT INTO transactions.transactions (id, sender, receiver, amount) VALUES (" + std::to_string(i) + ", 'Alice', 'Bob', 10.0)";
        CassStatement* insert_statement = cass_statement_new(insert_query.c_str(), 0);
        CassFuture* insert_future = cass_session_execute(session, insert_statement);
        cass_future_wait(insert_future);
        error = cass_future_error_code(insert_future);
        if (error != CASS_OK) {
            std::cerr << "Error inserting transaction: " << cass_error_desc(error) << std::endl;
            return 1;
        }
        cass_future_free(insert_future);
        cass_statement_free(insert_statement);
    }

    // Query the transactions from the table
    std::string select_query = "SELECT * FROM transactions.transactions";
    Cass Statement* select_statement = cass_statement_new(select_query.c_str(), 0);
    CassFuture* select_future = cass_session_execute(session, select_statement);
    cass_future_wait(select_future);
    error = cass_future_error_code(select_future);
    if (error != CASS_OK) {
        std::cerr << "Error querying transactions: " << cass_error_desc(error) << std::endl;
        return 1;
    }

    // Iterate through the results
    const CassResult* result = cass_future_get_result(select_future);
    CassIterator* iterator = cass_iterator_from_result(result);
    while (cass_iterator_next(iterator)) {
        const CassRow* row = cass_iterator_get_row(iterator);
        const CassValue* id_value = cass_row_get_column_by_name(row, "id");
        int id;
        cass_value_get_int32(id_value, &id);
        const CassValue* sender_value = cass_row_get_column_by_name(row, "sender");
        const char* sender;
        size_t sender_length;
        cass_value_get_string(sender_value, &
        float amount;
        cass_value_get_float(amount_value, &amount);
        std::cout << "Transaction " << id << ": " << sender << " -> " << receiver << " (" << amount << ")" << std::endl;
    }

    // Clean up
    cass_result_free(result);
    cass_iterator_free(iterator);
    cass_future_free(select_future);
    cass_statement_free(select_statement);
    cass_session_close(session);
    cass_cluster_free(cluster);

    return 0;
}
